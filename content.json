{"meta":{"title":"Feichao's blog","subtitle":null,"description":"Everything about me","author":"Feichao Wan","url":"http://blog.0xfc.cn"},"pages":[{"title":"工具箱","date":"2015-08-22T04:40:35.000Z","updated":"2015-08-22T05:06:16.000Z","comments":true,"path":"tool/index.html","permalink":"http://blog.0xfc.cn/tool/index.html","excerpt":"","text":"CanIUse CDNJS 站长工具 草料二维码 Markdown编辑器 在线图片压缩 css-js 压缩 sass to css CSS缓动函数 ColorHexa"},{"title":"关于Feichao Wan","date":"2015-08-17T13:56:50.000Z","updated":"2015-09-13T02:32:49.000Z","comments":true,"path":"about/index.html","permalink":"http://blog.0xfc.cn/about/index.html","excerpt":"","text":"职业2015年4月开始专职前端，目前在CVTE平台服务部，负责整个部门的前端工作状态如蜗牛般缓缓前行座右铭能有几个十年，会像现在这样：天不怕，地不怕；能有几个人生，会像此生一样：既勇敢，又善良。"}],"posts":[{"title":"Welcome to visit my new blog","slug":"welcome-to-my-new-blog","date":"2016-07-06T11:26:34.000Z","updated":"2016-07-06T11:33:53.000Z","comments":true,"path":"2016/07/06/welcome-to-my-new-blog/","link":"","permalink":"http://blog.0xfc.cn/2016/07/06/welcome-to-my-new-blog/","excerpt":"","text":"这个博客以后不会再更新了，只是留着，防止外链引用失效。 This blog will not update any more. 欢迎访问我的新博客，以后所有的文章更新都在新博客。网址：www.0xfc.cn。 Welcome to visit my new blog, all the updates will at my new blog. Site: www.0xfc.cn.","categories":[],"tags":[{"name":"new-blog","slug":"new-blog","permalink":"http://blog.0xfc.cn/tags/new-blog/"}]},{"title":"digit-dance","slug":"digit-dance","date":"2016-06-01T11:35:32.000Z","updated":"2016-06-01T13:23:49.000Z","comments":true,"path":"2016/06/01/digit-dance/","link":"","permalink":"http://blog.0xfc.cn/2016/06/01/digit-dance/","excerpt":"","text":"主题 原生JS实现的数字展示效果。 详情 html 12&lt;!-- 定义wrap元素 --&gt;&lt;div id=\"digit-dance\"&gt;&lt;/div&gt; javascript 1234567891011// 获取wrap元素var digitDanceEle = document.getElementById('digit-dance');// 使用wrap元素初始化实例var digitDance = new DigitDance(digitDanceEle);// 设置位数digitDance.setDigitBits(10);// 设置数据digitDance.setNumber(13456283); 效果","categories":[{"name":"component","slug":"component","permalink":"http://blog.0xfc.cn/categories/component/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"吸附对齐系统","slug":"absord-system","date":"2016-06-01T03:25:45.000Z","updated":"2016-06-01T06:23:33.000Z","comments":true,"path":"2016/06/01/absord-system/","link":"","permalink":"http://blog.0xfc.cn/2016/06/01/absord-system/","excerpt":"","text":"主题 原生JS实现的吸附对齐系统。 详情 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061...#content &#123; border: 1px solid #ddd; box-sizing: border-box; height: 400px; margin: auto; position: relative; width: 800px;&#125;#canvas &#123; height: 400px; position: absolute; width: 800px;&#125;#retangle &#123; background: #eee; border: 1px solid #ccc; box-shadow: 0 0 2px #ddd; height: 130px; left: 50px; top: 10px; width: 175px;&#125;#retangle-1 &#123; background: #333; border: 1px solid #000; box-shadow: 0 0 2px #111; height: 130px; left: 250px; top: 230px; width: 175px;&#125;#retangle-2 &#123; background: #666; border: 1px solid #333; box-shadow: 0 0 2px #444; height: 130px; left: 550px; top: 260px; width: 175px;&#125;.retangle &#123; box-sizing: border-box; cursor: pointer; position: absolute;&#125;...&lt;div id=\"content\"&gt; &lt;canvas id=\"canvas\" height=\"400\" width=\"800\"&gt;&lt;/canvas&gt; &lt;div id=\"retangle\" class=\"retangle\"&gt;&lt;/div&gt; &lt;div id=\"retangle-1\" class=\"retangle\"&gt;&lt;/div&gt; &lt;div id=\"retangle-2\" class=\"retangle\"&gt;&lt;/div&gt;&lt;/div&gt; 1234567891011121314151617// 声明吸附参考线var guideLines = new GuideLines();// 初始化吸附系统var moveSystem = new MoveSystem();// 设置最小吸附距离moveSystem.setABD(5);// 设置吸附参考线moveSystem.setGuideLines(guideLines);// 设置吸附对齐参考线moveSystem.setAlignLines(alignLines);// 设置被拖动的DOM元素moveSystem.setElement(retangle); 效果","categories":[{"name":"component","slug":"component","permalink":"http://blog.0xfc.cn/categories/component/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"Javascript new及其衍生","slug":"javascript-new-and-more","date":"2016-05-15T05:03:28.000Z","updated":"2016-05-15T05:12:37.000Z","comments":true,"path":"2016/05/15/javascript-new-and-more/","link":"","permalink":"http://blog.0xfc.cn/2016/05/15/javascript-new-and-more/","excerpt":"","text":"1.new操作符的原理 12345678910function new(f) &#123; var object = &#123;&#125;; object.__proto__ = f.prototype; return function() &#123; f.apply(object, arguments); return object; &#125;&#125; 从上述代码可以看出new操作符的基本原理： 第一步：新建一个对象object 第二步：向对象添加一个名为__proto__的属性，指向构造函数的原型 第三步：返回一个闭包 第四步：立即执行闭包，返回这个新对象。在闭包中，构造函数的作用域（this）为新对象object，执行构造函数可以为object添加新属性 第五步：返回新对象object 具体来说：123456789101112131415161718192021222324252627282930//构造函数function Person(name, age) &#123; this.name = name; this.age = age;&#125;Person.prototype.getName = function() &#123; return this.name;&#125;// 使用new操作符：// 返回新对象，并且新对象的被关联到构造函数的原型（prototype）var person = new Person('frank', 20);log(person.name); // franklog(person.age); // 20log(person.getName()); // frank// 直接执行构造函数：// 由于函数不返回任何数据，默认返回undefined，// 而name和age属性被添加到全局作用域var person2 = Person('peggy', 18);log(person2); // undefined// 使用apply方式执行构造函数：// 可以获取到属性，但是无法关联到原型（prototype）var person3 = &#123;&#125;;Person.apply(person3, ['peggy', 18]);log(person.name); // peggylog(person.age); // 18log(person.getName()); // Uncaught TypeError: person3.getName is not a function 2.作用域链当我们执行一个函数A的时候，JS引擎会为A生成一个执行环境，刚开始这个执行环境只有arguments一个可访问对象，还有一个指向外部执行环境的指针，这个外部执行环境也有一个指针指向它的外部执行环境，直到延续到全局执行环境。这样就生成了A的作用域链。当我们访问A中的一个变量v时，如果v不存在于当前的执行环境，则会通过作用域链查找上一个执行环境，如果还不存在v，则会继续通过作用域链查找，直到全局执行环境。123456789101112131415161718192021// 假设这是全局执行环境：__GlobalEnvironment__var a = 1; // 即__GlobalEnvironment__.a = 1;function A() &#123; // 假设这是函数A的执行环境：__AEnvironment__ // 此时A的执行环境会有一个指针指向__GlobalEnvironment__ var b = 2; // 即__AEnvironment__.b = 2; log(a); // 1 return function B() &#123; // 假设这是函数B的执行环境：__BEnvironment__ // 此时B的执行环境会有一个指针指向__AEnvironment__ var c = 3; // 即__BEnvironment__.b = 2; log(b); //2 &#125;&#125;var a = A(); // 返回一个闭包a(); // 打印b 通过上述代码也可以看到闭包就是作用域链实现的。 3.原型链在JS中，每定义一个函数，就会为这个函数自动生成一个原型属性（prototype），当我们使用new操作符通过一个构造函数创建一个实例的时候，这个实例会有一个内部指针（__proto__）指向构造函数的原型对象。当我们访问实例的属性时，如果实例本身不存在这个属性，就会查找构造函数的原型。如果还没找到这个属性但是这个原型恰好也有一个内部指针（__proto__），则会继续查找原型的原型对象，这样就形成了一个原型链。如何让这个原型有一个__proto__指针呢，那就是让这个原型也是某一个构造函数的实例。看下代码：1234567891011121314151617181920212223242526function Animal(kind) &#123; this.kind = kind;&#125;Animal.prototype.getKind = function() &#123; return this.kind;&#125;function Cat(name) &#123; this.name = name;&#125;// 通过将Cat的原型指向Animal的实例来继承AnimalCat.prototype = new Animal('cat');// 定义Cat自身的原型方法Cat.prototype.getName = function() &#123; return this.name;&#125;var cat = new Cat('Catty');// 通过cat的原型访问getNamecat.getName(); // Catty// 通过cat的原型链访问getKindcat.getKind(); // cat 通过原型链就可以实现继承了。","categories":[{"name":"tech","slug":"tech","permalink":"http://blog.0xfc.cn/categories/tech/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://blog.0xfc.cn/tags/Javascript/"},{"name":"new","slug":"new","permalink":"http://blog.0xfc.cn/tags/new/"}]},{"title":"基于React-material的组件","slug":"react-material-component","date":"2016-05-12T04:19:48.000Z","updated":"2016-05-12T05:01:58.000Z","comments":true,"path":"2016/05/12/react-material-component/","link":"","permalink":"http://blog.0xfc.cn/2016/05/12/react-material-component/","excerpt":"","text":"demo包括下属组件： BSelect Color Datetime MultiSelect Paging Tag BSelect按钮组组件，包括单选和多选。 Color颜色选择组件。 Datetime日期时间选择组件，可设置日期时间，日期，时间三种模式。 MultiSelect多选组件，支持异步数据加载，数据格式为{label: ‘’, value:’’}。 Paging分页组件，上一页，下一页，首页，尾页，跳转到某页。 Tag标签组件，输入内容点击回车添加标签。","categories":[{"name":"tech","slug":"tech","permalink":"http://blog.0xfc.cn/categories/tech/"}],"tags":[{"name":"Material","slug":"Material","permalink":"http://blog.0xfc.cn/tags/Material/"},{"name":"React","slug":"React","permalink":"http://blog.0xfc.cn/tags/React/"},{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"八戒传-9","slug":"Bajie-9","date":"2016-04-27T10:33:36.000Z","updated":"2016-04-27T11:21:42.000Z","comments":true,"path":"2016/04/27/Bajie-9/","link":"","permalink":"http://blog.0xfc.cn/2016/04/27/Bajie-9/","excerpt":"","text":"感想 怀念那些已经离开我们的兄弟！ 正文 八戒，老半仙走了。连续几天为师路过他家门口都看到院门紧锁，为师问了隔壁的补鞋匠，原来老半仙在一天夜里赶着小毛驴，驮着两大箱行李，匆匆忙忙的不知去哪里了。恐怕再也没机会见到他了，为师还是蛮感谢他带来的惊喜，只是还没来得及好好告别。不知道那两个箱子里面装的啥，听补鞋匠说是馒头，不过又听你师母说是蜡烛，为师觉得可能是门口的银杏树叶。之前有谣言说金山寺门口的银杏树叶可以当作护身符，有趋吉避害之效果，而且上次老半仙还偷偷摸摸的问为师树上到底有多少片叶子，想想还是很可疑的。 最近雨水不断，为师不常出门。记得西天路上，有一次突遇暴雨，雨水打在干燥的土地上，一股芬芳沁人心脾，为师问你们这种味道像什么？ 悟空说：像小猴子的味道。 我们都大吃一惊，都以为这猴子原来还吃过小猴子，没想到猴子说完就不理我们了，怔怔地看着远处的彩虹。后来为师才知道，原来悟空的意思是当他还是个小猴子的时候的那种味道。原来悟空也有童年。 为师原以为你会说是广寒宫或者高老庄的味道，没想到你却说是手指的味道。连在认真吃草的白龙马都被你的答案惊到了。你看着好奇的我们，慢慢的说：我老猪被打下凡间，转世为猪，刚开始一直不习惯，不愿意吃那些馊食恶水，一直忍着饿着，直到有一天，饿的实在受不了了，看着自己的手指以为是一只猪蹄，开心的不得了，狠狠的咬了一口，直到被疼醒。自此以后，不管发生什么事，我老猪发誓，绝对不会让自己饿着。 你刚说完，白龙马就开心的笑了，猴子已经从树上掉下来了，十个桃子都塞不满他的嘴。只有老沙，泪眼汪汪的看着你，好像对你有了新的想法一样。为师攥紧了手中的馒头，避开了你渴望的双眼。 为师又问老沙，老沙笑眯眯的说这种味道就像初次跪在为师面前剃度出家一样，哈哈，这倒一点也不出乎意料。 为师本想问问白龙马，但是他偷偷的跑到更远的地方吃草去了，这头宁愿吃草也不愿意回忆过往的龙，不容易啊。 好了，你师母要回来了。 爱你的师父，再聊。","categories":[{"name":"westgoal","slug":"westgoal","permalink":"http://blog.0xfc.cn/categories/westgoal/"}],"tags":[{"name":"八戒","slug":"八戒","permalink":"http://blog.0xfc.cn/tags/八戒/"}]},{"title":"react es6 装饰器","slug":"react-decorator","date":"2016-04-24T03:24:34.000Z","updated":"2016-04-24T03:28:20.000Z","comments":true,"path":"2016/04/24/react-decorator/","link":"","permalink":"http://blog.0xfc.cn/2016/04/24/react-decorator/","excerpt":"","text":"主题 如何使用es6装饰器？ 正文 ES6不支持Mixins，但是ES7支持Decorator，使用Decorator可以实现Mixins功能。Decorator本质上是一个高阶函数（高阶组件），在面向对象的语言中被定义为一个包装类。也就是说，使用Decorator，会为React组件添加一些通用的新功能。 在React中，Decorator定义为一个函数，这个函数将一个组件A作为参数，并且重新render一个以A为基础的组件。此时只需要在A组件定义的时候加上@Decorator。 123456789101112Component =&gt; &#123; constructor(props) &#123; super(props); ... &#125; ... render() &#123; &lt;Component &#123;...this.props&#125; ... /&gt; &#125;&#125; 有些时候需要使用this.context，此时应该手动将contextTypes传入Decorator。此时需要在A组件定义的时候加上@Decorator(contextTypes, context)。 123456789101112131415(contextTypes = &#123;&#125;, context = &#123;&#125;) =&gt; Component =&gt; &#123; static childContextTypes = contextTypes; static contextTypes = contextTypes; constructor(props) &#123; super(props); ... &#125; ... render() &#123; &lt;Component &#123;...this.props&#125; ... /&gt; &#125;&#125; 可以在Decorator中定义通用函数，将此函数作为props传入A组件中，此时A组件可以通过this.props.doSomething()使用此函数。 12345678doSomething() &#123; ...&#125;render() &#123; &lt;Component &#123;...this.props&#125; doSomething=&#123;this.doSomething.bind(this)&#125; /&gt;&#125; 也可以重新封装A组件。 12345render() &#123; &lt;Wrap ...&gt; &lt;Component &#123;...this.props&#125; ... /&gt; &lt;/Wrap&gt;&#125; Decorator不但可以装饰组件类，还可以装饰函数，多个装饰器也可以同时使用装饰同一个组件类，但是要保证每次装饰后不影响源组件的基本功能。 Decorator虽好，但是在使用之前还是要深思熟虑，props的来源会增加代码阅读和维护的难度，尤其是使用多个Decorator的时候。Decorator的使用对A来说应该是透明的，不能影响A的基本功能。","categories":[{"name":"tech","slug":"tech","permalink":"http://blog.0xfc.cn/categories/tech/"}],"tags":[{"name":"decorator","slug":"decorator","permalink":"http://blog.0xfc.cn/tags/decorator/"},{"name":"es6","slug":"es6","permalink":"http://blog.0xfc.cn/tags/es6/"},{"name":"react","slug":"react","permalink":"http://blog.0xfc.cn/tags/react/"}]},{"title":"如何写好一个react组件","slug":"how-to-create-react-component","date":"2016-04-17T06:36:59.000Z","updated":"2016-04-17T06:38:54.000Z","comments":true,"path":"2016/04/17/how-to-create-react-component/","link":"","permalink":"http://blog.0xfc.cn/2016/04/17/how-to-create-react-component/","excerpt":"","text":"正文 设置默认属性 defaultProps 属性检测 propTypes 构造函数：获取默认值，绑定函数 Controlled Componennt：更新Value 更新state，回调onChange 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153import React from 'react';import RaisedButton from 'material-ui/lib/raised-button';//定义内部样式const minBtnStyle = &#123; height: '30px', margin: '5px 0', marginLeft: '10px', minWidth: 'auto'&#125;;const minBtnLabelStyle = &#123; lineHeight: '30px'&#125;;class BSelect extends React.Component &#123; //1、设置默认属性 static defaultProps = &#123; /* 选择列表 */ checkList: [], /* 根元素类名 */ className: undefined, /* 默认值，multi为true时，是数组 */ defaultValue: undefined, /* 组件说明文字 */ label: undefined, /* 是否启用多选 */ multi: false, /* 选中的值，是否是Controlled Components */ value: undefined, /* event */ onChange: undefined &#125; //2、属性检测 static propTypes = &#123; checkList: React.PropTypes.array.isRequired, className: React.PropTypes.string, defaultValue: (props, propName) =&gt; &#123; if(props.multi) &#123; if(props[propName] &amp;&amp; !(props[propName] instanceof Array)) &#123; return new Error('defaultValue should be Array cause multi is true'); &#125; &#125; &#125;, label: React.PropTypes.string, multi: React.PropTypes.bool, value: (props, propName) =&gt; &#123; if(props.multi) &#123; if(props[propName] &amp;&amp; !(props[propName] instanceof Array)) &#123; return new Error('value should be Array cause multi is true'); &#125; &#125; &#125;, onChange: React.PropTypes.func &#125; //3、构造函数：获取默认值，绑定函数 constructor(props) &#123; super(props); this._updateState = this._updateState.bind(this); this._setValue = this._setValue.bind(this); this.isMulti = this.props.multi; //init states this.state = &#123; value: this.props.defaultValue === undefined ? this.isMulti ? [] : '' : this.props.defaultValue &#125;; &#125; componentWillMount() &#123;&#125; //4、Controlled Componennt：更新Value componentWillReceiveProps(nextProps) &#123; this._setValue(nextProps, nextProps.value); &#125; _setValue(props, value) &#123; if(value !== undefined) &#123; if(this.isMulti) &#123; this.state.value = value === undefined ? [] : value; &#125; else &#123; this.state.value = value === undefined ? '' : value; &#125; &#125; &#125; //5、更新state，回调onChange _updateState() &#123; if(typeof this.props.onChange === 'function') &#123; this.props.onChange(this.state.value); &#125; this.setState(&#123; value: this.state.value &#125;); &#125; render() &#123; let labelText = this.props.label; let labelElement = labelText ? &lt;label&gt;&#123;labelText + '：'&#125;&lt;/label&gt; : ''; return ( &lt;div className=&#123;'row pdl1 pdr1 middle-xs ' + (this.props.className || '')&#125;&gt; &#123;labelElement&#125; &lt;div className='col-xs nopadding'&gt; &#123; this.props.checkList.map((v, i) =&gt; &#123; return ( &lt;RaisedButton className=&#123;v.btnClassName&#125; disabled=&#123;v.disabled&#125; label=&#123;v.label&#125; labelStyle=&#123;minBtnLabelStyle&#125; key=&#123;i&#125; onClick=&#123;() =&gt; &#123; if(this.isMulti) &#123; let index = this.state.value.indexOf(v.value); if(index !== -1) &#123; this.state.value.splice(index, 1); &#125; else &#123; this.state.value.push(v.value); &#125; &#125; else &#123; this.state.value = v.value; &#125; this._updateState(); &#125;&#125; secondary=&#123;(() =&gt; &#123; if(this.state.value instanceof Array) &#123; return this.state.value.includes(v.value); &#125; else &#123; return this.state.value === v.value; &#125; &#125;)()&#125; style=&#123;minBtnStyle&#125;/&gt; ) &#125;) &#125; &lt;/div&gt; &lt;/div&gt; ) &#125;&#125;export default BSelect;","categories":[{"name":"tech","slug":"tech","permalink":"http://blog.0xfc.cn/categories/tech/"}],"tags":[{"name":"React Component","slug":"React-Component","permalink":"http://blog.0xfc.cn/tags/React-Component/"}]},{"title":"Material Icons can't display ?","slug":"Material-Icons-can-t-display","date":"2016-04-17T03:08:20.000Z","updated":"2016-04-18T01:15:31.000Z","comments":true,"path":"2016/04/17/Material-Icons-can-t-display/","link":"","permalink":"http://blog.0xfc.cn/2016/04/17/Material-Icons-can-t-display/","excerpt":"","text":"正文 Stark项目使用了react-material-ui，其中包含Material Icons，下载完成所有格式的字体文件后： 1. 导入字体 1234567891011@font-face &#123; font-family: 'Material Icons'; font-style: normal; font-weight: 400; src: url(MaterialIcons-Regular.eot); /* For IE6-8 */ src: local('Material Icons'), local('MaterialIcons-Regular'), url(MaterialIcons-Regular.woff2) format('woff2'), url(MaterialIcons-Regular.woff) format('woff'), url(MaterialIcons-Regular.ttf) format('truetype');&#125; 2. 使用字体 123456789101112131415161718.material-icons &#123; direction: ltr; display: inline-block; font-family: 'Material Icons'; font-size: 14px; /* Preferred icon size */ font-weight: normal; font-style: normal; letter-spacing: normal; line-height: 1; text-transform: none; white-space: nowrap; word-wrap: normal; /* Support for all WebKit browsers. */ -webkit-font-smoothing: antialiased; /* Support for Firefox. */ -moz-osx-font-smoothing: grayscale;&#125; 上述两步完成后，在Mac下的chrome上完美的运行着，但是到了windows下的chrome却没法显示字体。最后发现还需要在步骤2的类中添加下述两句CSS： 1234567.material-icons&#123; /* Support for Safari and Chrome. */ text-rendering: optimizeLegibility; /* Support for IE. */ font-feature-settings: 'liga';&#125; 这两句CSS的共同作用是启用字体的连字效果，就是下述这种效果,，oo和th都被短线连接： 强烈建议阅读web-font这篇文章，对text-rendering和font-feature-settings讲解非常详细。 参考：font-smoothing","categories":[{"name":"tech","slug":"tech","permalink":"http://blog.0xfc.cn/categories/tech/"}],"tags":[{"name":"Material Icons","slug":"Material-Icons","permalink":"http://blog.0xfc.cn/tags/Material-Icons/"}]},{"title":"Javascript中Node和Element区别","slug":"NodeElement","date":"2016-04-07T13:22:36.000Z","updated":"2016-04-07T13:27:30.000Z","comments":true,"path":"2016/04/07/NodeElement/","link":"","permalink":"http://blog.0xfc.cn/2016/04/07/NodeElement/","excerpt":"","text":"主题 Javascript中Node和Element区别。 正文 Node是HTML文档中所有内容的父类，包括元素Element，注释Comment，文本Text等等。Element是Node的子类。 通过代码来测试一下： 123456789101112&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Node &amp; ELlement&lt;/title&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- This is Comment Note --&gt; &lt;div&gt;Element Node&lt;/div&gt; Text Node&lt;/body&gt;&lt;/html&gt; 在控制台中执行下述代码：12&gt; document.body.childNodes //获取所有的Node节点&gt; [#text, &lt;!-- This is Comment Note --&gt;, #text, &lt;div&gt;Element Node&lt;/div&gt;, \"Text Node\"] 可以看到，结果中除了预见中的div元素节点，还有注释和文本节点，甚至还有两个#text字段，点击详情可以看到其实#text也是文本节点，只是内容是回车。 再看下述代码：12&gt; document.body.children //获取所有的Element节点&gt; [&lt;div&gt;Element Node&lt;/div&gt;] 可以看到，结果只用div元素节点。 具体来说，Node只是Element的一个父元素。Element继承了Node的属性和方法，又加入了自己的属性和方法。 参考：Node，Element","categories":[{"name":"tech","slug":"tech","permalink":"http://blog.0xfc.cn/categories/tech/"}],"tags":[{"name":"Element","slug":"Element","permalink":"http://blog.0xfc.cn/tags/Element/"},{"name":"Node","slug":"Node","permalink":"http://blog.0xfc.cn/tags/Node/"}]},{"title":"Stark运营平台架构","slug":"StarkOS","date":"2016-03-27T03:44:16.000Z","updated":"2016-03-27T03:48:50.000Z","comments":true,"path":"2016/03/27/StarkOS/","link":"","permalink":"http://blog.0xfc.cn/2016/03/27/StarkOS/","excerpt":"","text":"主题 Stark架构 正文 Stark是一个运营平台，使用的是Material + React + Redux开发。项目前期由于时间预估不准确，加上只有一个前端，所以计划中后台人员也要写点简单的页面，为了让后台人员快速的写出统一的页面，我将所有的Material组件重新封装，比如将所有的form组件封装为Input组件，所有的封装对后台人员来说都是透明的。理想的状态是后台人员只需要完成一些JSON配置就可以输出一些标准的页面。下面是Stark的架构图： 业务组件就是JSON配置出来的，JSON中也封装了所有的业务逻辑。中间组件是通过解析业务组件中的JSON，使用基础组件生成的页面，只是单纯的View。而基础组件就是对所有Material组件的再封装加上实现的一些新的组件。 Redux可以通过设置props帮助我们管理所有业务组件和部分中间组件的状态，业务组件内部不会擅自更改自己的状态，而中间组件和基础组件则拥有自更新状态的能力，而且越是基础的组件，初始化完成后依赖props更新状态的可能性就越小，也就越聚合。 因为业务组件的样式完全依赖JSON配置，没有自定义任何特殊的组件，所以前期可以只实现基础组件的部分功能，保证基本业务逻辑的正确，后台人员可以快速的完成一些页面及后台功能。而基础组件的其他功能，比如样式优化，表单验证可以交给专业的前端人员。 这样我们就可以快速输出第一版原型，保证在项目前期业务人员就可以进行业务逻辑的验证。","categories":[{"name":"tech","slug":"tech","permalink":"http://blog.0xfc.cn/categories/tech/"}],"tags":[{"name":"React","slug":"React","permalink":"http://blog.0xfc.cn/tags/React/"},{"name":"Redux","slug":"Redux","permalink":"http://blog.0xfc.cn/tags/Redux/"}]},{"title":"八戒传-8","slug":"Bajie-8","date":"2016-03-24T13:06:51.000Z","updated":"2016-03-24T13:13:18.000Z","comments":true,"path":"2016/03/24/Bajie-8/","link":"","permalink":"http://blog.0xfc.cn/2016/03/24/Bajie-8/","excerpt":"","text":"感想 又是一年啊，怎么还没长白头发！ 正文 八戒，过年了，你那边应该是笙歌艳舞的子时，为师这边已经炮竹声声了。 小和尚和小尼姑出去玩了，寺里空荡荡的，你师母在守庵，为师在守庙。 远游的僧人都没回来，他们在异乡的宝刹与为师一起守岁。 来年，不知道为师会不会长头发，内有烦恼丝，倒不如长几根头发，不但可以帅帅的，还能为佛祖多赚几箱香油钱。 今年，寺里的香火不错，到了年底结余不少，管钱的师兄说给大家置换些衣服，小尼姑们都没啥反应，倒是小和尚们吵吵嚷嚷的，这一幕让为师想起了西天路上每次化到斋饭都是你抢先一步，完全不考虑为师的感受，要不是猴子管着你，为师可能早就饿屎了。 自从我们西行的故事传开后，为师经常看到小娃娃在玩角色扮演的游戏。前几天，又见到了，为师呆呆的站在那里看了好久，看到了活蹦乱跳的猴子，好吃懒做的猪，任劳任怨的沙僧，就是没找到细皮嫩肉的圣僧，为师就跑过去问一个小朋友：为什么没有唐僧呢？小孩子不耐烦的说：你这笨和尚，唐僧当然是被妖怪抓走了！ 小孩子们都在争着做猴子，连猴子猴孙都在抢着做。八戒你呢一般都是胖胖的小娃娃，坐在那里不停的吃东西。老沙却总是围在你的旁边，不停的指着猴子们说着这里演错了，那里演的不对。为师的存在仅仅是为了向旁边的大人们证明这不是一场闹剧。 这十几年的取经路，为师也明白取经真正的核心是一条正确的路和一颗坚定不移的心，毕竟佛祖等的并不是其他某某某。 回到寺庙后，为师去尼姑庵找你师母，把这件事说给你她听，你师母呵呵一笑就不理为师了，转身叫来了几个小尼姑，画面仿佛突然回到了盘丝洞，那时为师蜷缩在阴暗的角落，你却在悠悠的偷看姑娘们洗澡。 看来所有的结局不是不尽人意，而是人意太浓，用情太重。 爱你的师父，再聊。记得回信啊。","categories":[{"name":"westgoal","slug":"westgoal","permalink":"http://blog.0xfc.cn/categories/westgoal/"}],"tags":[{"name":"八戒","slug":"八戒","permalink":"http://blog.0xfc.cn/tags/八戒/"}]},{"title":"八点拖放缩放","slug":"eight-dot-zoom","date":"2016-03-20T01:48:42.000Z","updated":"2016-03-20T06:08:32.000Z","comments":true,"path":"2016/03/20/eight-dot-zoom/","link":"","permalink":"http://blog.0xfc.cn/2016/03/20/eight-dot-zoom/","excerpt":"","text":"主题 原生JS实现的8点拖拽缩放系统。 详情 使页面中的任何元素都可以实现拖拽缩放的功能，只要在HTML属性中添加eight-dot-zoom即可。支持IE8以上现代浏览器。 如何使用： 1. 引用8-dot-zoom.css和8-dot-zoom.js 2. 在需要移动的元素上添加eight-dot-zoom属性 如下：1&lt;img src=\"...\" eight-dot-zoom/&gt; 3. 引用完8-dot-zoom.js后可以使用下述方式指出拖拽边界： 1234567891011//指定拖拽元素的父元素的位置信息为其边界window.EightZoomSys.demarcation = 'parent';//指定某一元素的位置信息为其边界window.EightZoomSys.demarcation = Element;//直接指定边界window.EightZoomSys.demarcation = &#123; top: 100, left: 100, width: 500, height: 500&#125;","categories":[{"name":"component","slug":"component","permalink":"http://blog.0xfc.cn/categories/component/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"八戒传-7","slug":"Bajie-7","date":"2016-02-22T15:26:36.000Z","updated":"2016-02-22T15:29:32.000Z","comments":true,"path":"2016/02/22/Bajie-7/","link":"","permalink":"http://blog.0xfc.cn/2016/02/22/Bajie-7/","excerpt":"","text":"感想 傻子的世界。 正文 八戒，前几天老方丈坐化了，为师不知道他去西天能不能见到佛祖。虽然老方丈经常跟为师说只要心中有佛，在哪里都是西天，但是我们四人跋山涉水十几年都是因为我们心中没有佛吗？当然我们最后还是找到了佛。也许这是老方丈的境界，也许他现在正和佛祖侃家常呢，谁知道呢。老方丈是个好人，即使他的弟子中只有为师一个稍有出息，但是说句心里话，作为一个和尚，有没有出息都无所谓，而为师之所以有出息，也只是因为比其他和尚多走了一些路。 在皇上的爱护下，金山寺依然是香火圣地。皇上偶尔也会过来和为师聊聊天，聊的不多就走了，但是每次离开的时候都会稍作凝视门外的银杏树。为师不知道这棵树是谁种的，也许是皇上，反正比它老的人都已经不在了。记得皇上曾经问为师：御弟，你说是我们在追赶岁月，还是岁月在追赶我们？当时为师答道：皇上，岁月如初，人自竞逐。也许皇上现在已经到了岁月如初的年纪了。 为师不知道街上那老半仙是什么时候搬过来的，只是记得有一天为师和你师娘散步回来路过他家门口时，突然就窜出来一个老头，吓得为师赶紧念起了紧箍咒。这老半仙也真够有意思的，圣僧圣僧叫了半天就是为了给为师画一幅画像。为师欣然答应了，和你师娘正襟危坐了好久，结果根本就没画你师娘，气得你师娘好几天都没做肉肉吃，而且几天后听说城西有人大量售卖为师的画像，为师本想带着小和尚去讨回公道，起码要给佛祖收点香油钱，但是最后看了看满满的功德箱，还是打消了这个念头，佛道本是一家嘛。 其实老半仙还是蛮有意思的。有一次，为师也在门外凝视银杏树，老半仙不知道什么时候就站到为师旁边了，很突兀的问：圣僧啊，你说这树上有多少片叶子啊？为师讨厌别人说话的时候每一句的末尾都加个啊。为师说：你数啊。他又说：可能是我老眼昏花，数不清啊。为师问：你关心这个干啥呢？他说：那我还能关心啥啊，你这里只有一棵树，数树也没意思啊。为师有点生气了：那你可以去数花，数草，也可以去数和尚啊，为什么偏偏数树叶呢？！他看看了为师，默默的点了点头：圣僧是第一个啊。为师问：第一个啥？他很疑惑的看着为师：第一个和尚啊。说完他就慢悠悠的进了寺庙。为师看了看这树，觉得老半仙说的有道理，这树叶的确是数不清的，说不定明年哪个角落的叶子根本就懒得出来晒太阳，我们又能如何？数不清的不是树叶，是自然。数的清的也不是和尚，是金山寺的和尚。 八戒，说了这么多，是不是很想见见老半仙，那你要抓紧啊，天上一天，地下一年，你要是再耽误十天半个月说不定就见不到他了。 记得要回信哦。 爱你的师傅，再聊。","categories":[{"name":"westgoal","slug":"westgoal","permalink":"http://blog.0xfc.cn/categories/westgoal/"}],"tags":[{"name":"八戒","slug":"八戒","permalink":"http://blog.0xfc.cn/tags/八戒/"}]},{"title":"八戒传-6","slug":"Bajie-6","date":"2016-01-24T07:06:26.000Z","updated":"2016-01-25T04:44:44.000Z","comments":true,"path":"2016/01/24/Bajie-6/","link":"","permalink":"http://blog.0xfc.cn/2016/01/24/Bajie-6/","excerpt":"","text":"感想 过去，现在，未来。 正文 大概是从去年的这个时候，为师开始研究艺术了，所以这么久没给你写信。在天上是不是很无聊？是不是又肥了？不瞒你说，为师肥了一些，隔壁的大爷经常问我：圣僧，出家人不近荤腥，为啥你越来越肥呢？每到这时为师就会双手合十，虔诚的答道：因为我佛，肥。 为啥开始研究艺术呢，不知道欸，大概有两个原因吧。 第一个就是看的经书太多了，现在经书上每一个字都认识为师，但是为师却不懂它们在一起的样子。你也许无法理解这种感受，就像你吃完了一颗人参果却不知道它是什么味道一样，但是却可以真的长生不老。直到有一天，为师在门口撞钟，那颗银杏树上的鸟们叽叽喳喳的喊个不停，都打乱了为师撞钟的节奏，小和尚们都好奇的跑出来，为师以为他们是出来看热闹的，没想到，他们却说今天的钟声振聋发聩，犹如醍醐灌顶。那一刻，为师突然明白为什么给小和尚讲经的时候他们总是在打瞌睡，而今天的钟声却可以达到如此的效果。从这以后，为师就开始研究乐理了。 第二个原因就是为师觉得经书其实也是艺术。但是经书的表现方式太过晦涩，即使像为师这样自小就研习经书佛理，理解起来仍然是比较困难的。 通俗地讲为师现在到了什么层次呢？3天前月中，巷子里著名的画家老半仙在寺院门口摆摊卖画，为师去瞧了瞧，看到一幅画异常奇怪，画中有一颗光秃秃的树，周围有零星破土而出的草，却有一只蝴蝶在翩翩起舞。为师想抽死这老半仙，就这一幅画竟卖3两2钱1分，感情他是想骗走佛祖的香油钱。为师问老半仙这幅画讲了啥，老半仙却反问为师：圣僧，你觉得这幅画有何深意？为师答道，这幅画是在说虽然树是光秃秃的，但是它并没有枯死，周围的小草说明了春天即将到来，万物即将复苏，至于这蝴蝶，它出现在不该出现的时节，预示着在不久的将来，这里必然繁花盛开，欣欣向荣，蜂蝶成群。老半仙笑了，他说：圣僧，你只看到了它的未来，但是却没有看到它的过去，这幅画其实有一个典故。 上古时期，大地孕育着数不清的奇兽异种，天地之间充满灵气，所有种族和谐相处，就这样过了成千上万年，突然有一天天降火种，灵气外泄，几乎在一瞬间，大地变成了火海。突如其来的灾难几乎杀死了一切生灵，这幅画就是灾难之后的场景，蝴蝶一族在最后一刻将他们的下一代与这棵树的命运绑在一起，它们希望这棵树可以用自己的生命之水代替外泄的灵气来守护蝴蝶一族的生生不息，而代价就是蝴蝶一族所有的族员要在大火烧来的那一刻紧紧围绕着大树，保护着大树。灾难过去了，留下了一颗光秃秃的树和一只一直守护在旁边的蝴蝶，已经近30天了，没有一丝复苏的迹象，而它也即将因为灵气不足而死去，第31天，当它再次睁开眼，它瞠目结舌，它看到了一丝丝绿绿的草尖，它用尽最后的力气站起来，拍打着翅膀，绕着大树翩翩起舞，它知道，万物即将复苏，蝴蝶亦将传承。 老半仙讲完了，痴痴地望着为师，好像在问买不买。为师快气疯了，这种骗人的典故为师可以讲一万个，为师甩了甩袖子走了。什么过去，现在和未来，长生不老的人会在乎这些吗？八戒，你说呢？ 为师觉得对牛弹琴和对猪谈艺其实是一个意思。 爱你的师傅，再聊！ 记得回信哦~","categories":[{"name":"westgoal","slug":"westgoal","permalink":"http://blog.0xfc.cn/categories/westgoal/"}],"tags":[{"name":"八戒","slug":"八戒","permalink":"http://blog.0xfc.cn/tags/八戒/"}]},{"title":"x-ui","slug":"x-ui","date":"2015-12-23T13:23:01.000Z","updated":"2015-12-23T13:25:07.000Z","comments":true,"path":"2015/12/23/x-ui/","link":"","permalink":"http://blog.0xfc.cn/2015/12/23/x-ui/","excerpt":"","text":"主题 基于CVTOUCH PC端和手机端，抽象出的CSS+JS组件。 详情 直接查看DEMO：demo","categories":[{"name":"tech","slug":"tech","permalink":"http://blog.0xfc.cn/categories/tech/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"angular-material-autocomplete","slug":"autocomplete","date":"2015-11-30T11:26:03.000Z","updated":"2015-11-30T11:37:20.000Z","comments":true,"path":"2015/11/30/autocomplete/","link":"","permalink":"http://blog.0xfc.cn/2015/11/30/autocomplete/","excerpt":"","text":"主题 基于angular material的自动完成组件，目前只支持固定列表。 详情 配置文件如下：123456789angular .module('demoAutocomplete', [ 'ngMaterial', 'fc.autocomplete' ]).controller('DemoCtrl', DemoCtrl);function DemoCtrl($scope) &#123; $scope.userList = ['abcdefg-1', 'abcdefg-2', 'abcdefg-3', 'abcdefg-4', 'abcdefg-5'];&#125; HTML文件如下： 1&lt;div fc-auto-complete placeholder=\"请输入内容\" list-data=\"userList\"&gt;&lt;/div&gt; Options: placeholder: input的placeholder属性list-data: array，待选择的所有数据","categories":[{"name":"component","slug":"component","permalink":"http://blog.0xfc.cn/categories/component/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"record-wave","slug":"record-wave","date":"2015-10-31T08:13:43.000Z","updated":"2015-10-31T08:35:28.000Z","comments":true,"path":"2015/10/31/record-wave/","link":"","permalink":"http://blog.0xfc.cn/2015/10/31/record-wave/","excerpt":"","text":"主题 基于HTML5 Web Audio API，使用canvas绘制的录音曲线图。 详情 直接查看DEMO：demo","categories":[{"name":"tech","slug":"tech","permalink":"http://blog.0xfc.cn/categories/tech/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"angular material模板","slug":"angular-material-template","date":"2015-09-30T07:34:58.000Z","updated":"2015-09-30T07:51:01.000Z","comments":true,"path":"2015/09/30/angular-material-template/","link":"","permalink":"http://blog.0xfc.cn/2015/09/30/angular-material-template/","excerpt":"","text":"主题 基于angular material实现的后台模板，可以直接套用。 功能：登录，修改用户信息，语言切换。 详情 直接查看DEMO：demo","categories":[{"name":"component","slug":"component","permalink":"http://blog.0xfc.cn/categories/component/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"angular content clear","slug":"clear","date":"2015-09-21T13:20:27.000Z","updated":"2016-03-28T08:44:46.000Z","comments":true,"path":"2015/09/21/clear/","link":"","permalink":"http://blog.0xfc.cn/2015/09/21/clear/","excerpt":"","text":"主题 基于angular material，可用于清除输入框，选择框的内容。 详情Select TestSelect Test 如何使用： 此插件的原理是使用div包装需要清除的元素。在需要被清除的元素上添加fcclear即可。其中fc-class为外部包装div的样式，fc-icon-class为清除icon的样式。 配置文件如下：1234567891011121314angular .module('demoWan', [ 'ngMaterial', 'ngMdIcons', 'fc.clear' ]).controller('DemoCtrl', DemoCtrl); function DemoCtrl($scope) &#123; $scope.projects = [&#123; name: 'Select Test', &#125;, &#123; name: 'Select Test' &#125;]; &#125; 原始HTML文件如下： 1234567891011121314151617&lt;div ng-controller=\"DemoCtrl\"&gt; &lt;div layout=\"row\"&gt; &lt;md-input-container md-no-float fcclear fc-class=\"clear-name\" fc-icon-class=\"clear-icon\" flex=\"40\"&gt; &lt;input ng-model=\"name\" placeholder=\"Name\"&gt; &lt;/md-input-container&gt; &lt;span flex&gt;&lt;/span&gt; &lt;md-input-container md-no-float fcclear fc-class=\"clear-sex\" fc-icon-class=\"clear-icon\" flex=\"40\"&gt; &lt;input ng-model=\"Sex\" placeholder=\"Sex\"&gt; &lt;/md-input-container&gt; &lt;/div&gt; &lt;md-select placeholder=\"Select\" fc-class=\"clear-select\" fc-icon-class=\"clear-icon-select\" fcclear ng-model=\"projectSelect\"&gt; &lt;md-option ng-value=\"project\" ng-repeat=\"project in projects\"&gt;Select Test&lt;/md-option&gt; &lt;/md-select&gt; &lt;md-select placeholder=\"Multi Select\" fc-class=\"clear-select\" fc-icon-class=\"clear-icon-select\" fcclear ng-model=\"projectSelect1\" fc-clear-tip=\"清除\" fc-model-type=\"array\"&gt; &lt;md-option ng-value=\"project\" ng-repeat=\"project in projects\"&gt;Select Test&lt;/md-option&gt; &lt;/md-select&gt;&lt;/div&gt; 经过包装的HTML文件如下： 12345678910111213141516&lt;div ng-controller=\"DemoCtrl\"&gt; &lt;div layout=\"row\"&gt; &lt;div class=\"clear-content clear-name\" flex=\"40\"&gt; &lt;md-input-container md-no-float=\"\" class=\"md-default-theme\"&gt; &lt;input ng-model=\"name\" placeholder=\"Name\" class=\"ng-pristine ng-valid md-input ng-touched\" aria-label=\"Name\" id=\"input_3\" tabindex=\"0\" aria-invalid=\"false\"&gt; &lt;/md-input-container&gt; &lt;ng-md-icon icon=\"cancel\" size=\"18\" class=\"clear-icon ng-hide\" ng-click=\"name=&amp;quot;&amp;quot;\" ng-show=\"name\" aria-label=\"Clear\" role=\"button\" tabindex=\"0\" aria-hidden=\"true\"&gt; &lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"18\" height=\"18\"&gt; &lt;path d=\"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"&gt; &lt;/path&gt; &lt;/svg&gt; &lt;/ng-md-icon&gt; &lt;/div&gt; ... &lt;/div&gt;&lt;/div&gt; Options: fc-class: 包装div的样式fc-icon-class: 清除icon的样式fc-clear-tip: 清除icon的文本，默认为Clearfc-model-type: 当被清除的model是Array时，需要手动指定此参数的值为‘array’","categories":[{"name":"component","slug":"component","permalink":"http://blog.0xfc.cn/categories/component/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"CSS 选择器","slug":"css-selectors","date":"2015-09-17T12:01:19.000Z","updated":"2015-09-21T13:21:33.000Z","comments":true,"path":"2015/09/17/css-selectors/","link":"","permalink":"http://blog.0xfc.cn/2015/09/17/css-selectors/","excerpt":"","text":"主题 待更新。 详情 敬请期待。","categories":[{"name":"tech","slug":"tech","permalink":"http://blog.0xfc.cn/categories/tech/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://blog.0xfc.cn/tags/CSS/"}]},{"title":"paging","slug":"paging","date":"2015-09-12T07:54:40.000Z","updated":"2015-09-12T08:23:24.000Z","comments":true,"path":"2015/09/12/paging/","link":"","permalink":"http://blog.0xfc.cn/2015/09/12/paging/","excerpt":"","text":"主题 基于angular material的分页组件。 详情 配置文件如下：123456789101112131415angular .module('demoWan', [ 'ngMaterial', 'fc.paging' ]).controller('DemoCtrl', DemoCtrl); function DemoCtrl($scope) &#123; $scope.total = 50; $scope.currentPage = 1; $scope.step = 6; $scope.gotoPage = function() &#123; //do something &#125;; &#125; HTML文件如下： 1234567&lt;wan-material-paging wmp-total=\"total\" goto-page=\"gotoPage()\" position=\"center\" current-page=\"currentPage\" step=\"step\"&gt;&lt;/wan-material-paging&gt; Options: wmp-total: 总页数goto-page: 点击翻页按钮回调函数position: 组件的位置，取值和layout-align一致current-page: 当前页step: 每屏显示的页数","categories":[{"name":"component","slug":"component","permalink":"http://blog.0xfc.cn/categories/component/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"使用gulp构建SeaJS","slug":"gulp-seajs","date":"2015-09-02T03:19:29.000Z","updated":"2015-09-02T06:14:47.000Z","comments":true,"path":"2015/09/02/gulp-seajs/","link":"","permalink":"http://blog.0xfc.cn/2015/09/02/gulp-seajs/","excerpt":"","text":"主题 使用SeaJS完成了Cvtouch商城的模块化工作，接下来一个严峻的问题是如何进行构建，因为模块化之前使用的是gulp，也为了减少切换成本，放弃了SPM，决定还是暂时使用gulp构建。 正文 使用SeaJS主要是改变了JS的文件结构，对其他静态文件CSS，IMG都没有什么影响。所以本文只针对模块化构建前后的JS部分。 对JS的构建包括：合并，压缩，文件名+hash。 模块化之前的gulp file：12345678910111213 gulp.task('lib-js', [], function() &#123; return gulp.src([ pathSource.libs + 'jquery.min.js', pathSource.libs + 'jquery.bpopup.min.js']) .pipe(sourcemaps.init()) .pipe(concat('lib.min.js')) .pipe(uglify()) .pipe(rev()) .pipe(sourcemaps.write('.')) .pipe(gulp.dest(pathDist.libs)) .pipe(rev.manifest(&#123;base:'', merge: true&#125;)) .pipe(gulp.dest(''));&#125;); 模块化之后的gulp file：123456789101112131415 gulp.task(\"module-js\", ['component-js'], function()&#123; gulp.src([ pathSource.modules + \"cstorage.js\", pathSource.modules + \"dialog.js\", pathSource.modules + \"util.js\"], &#123;base: pathSource.root&#125;) .pipe(transport()) .pipe(sourcemaps.init()) .pipe(concat('module.min.js')) .pipe(uglify()) .pipe(rev()) .pipe(sourcemaps.write('.')) .pipe(gulp.dest(pathDist.modules)) .pipe(rev.manifest(&#123;base:'', merge: true&#125;)) .pipe(gulp.dest(''));&#125;); 可以看到，构建操作：合并，压缩，文件名+hash，模块化前后本质上没有任何区别。而模块化之后主要多了一步transport（使用gulp-seajs-transport）。关于SeaJS的transport，请看http://www.zhihu.com/question/20789867/answer/16187950，简单就是为每个模块命名ID，使SeaJS在定位模块时采用ID，而不是文件名。这里要详细了解下SeaJS模块ID的解析规则，否则可能在构建后发生无法找到模块的错误，具体可以看这里http://segmentfault.com/a/1190000000354302和https://github.com/seajs/seajs/issues/930，简单来说就是尽量使用相对标识，不要使用顶级标识。 HTML中引用构建后的文件：123456789101112131415&lt;!-- 公共模块 --&gt;&lt;!-- build:js $&#123;pageContext.request.contextPath&#125;/modules/module.min.js --&gt;&lt;!-- /build --&gt;&lt;!-- 业务模块 --&gt;&lt;!-- build:js $&#123;pageContext.request.contextPath&#125;/public/public.min.js --&gt;&lt;!-- /build --&gt;&lt;script&gt; seajs.config(&#123; charset: 'utf-8', debug: false &#125;); seajs.use(\"public/js/main\");&lt;/script&gt; 看起来没什么复杂的，其实最重要的是熟悉SeaJS ID的解析规则！！！","categories":[{"name":"tech","slug":"tech","permalink":"http://blog.0xfc.cn/categories/tech/"}],"tags":[{"name":"SeaJS","slug":"SeaJS","permalink":"http://blog.0xfc.cn/tags/SeaJS/"},{"name":"gulp","slug":"gulp","permalink":"http://blog.0xfc.cn/tags/gulp/"}]},{"title":"引入SeaJS","slug":"start-seajs","date":"2015-08-31T04:07:06.000Z","updated":"2015-09-02T03:16:39.000Z","comments":true,"path":"2015/08/31/start-seajs/","link":"","permalink":"http://blog.0xfc.cn/2015/08/31/start-seajs/","excerpt":"","text":"主题 为什么我选择了SeaJS 正文 前端开发中遇到的问题以前如果要将某个功能抽象出来，比如Cvtouch商城的公共部分common.js，包括显示错误，打印错误，编码解码等，首先会自己找个名字，有意义并且不会冲突，可能是Common，然后将Common 关联到全局对象window.Common={}，最后在Common下定义功能函数，Common.log=function(){}，Common.encode=function(){}。这样做看似没什么问题，只要在HTML中引用common.js，那么所用的JS文件都可以通过Common使用公共函数log和encode。但是真的没问题吗?起码现在有3个问题需要思考。 命名冲突。假如某一天另一个项目组的小A看到我们的公共模块感觉还不错，想拿过去直接使用，而他的项目里面有个文件叫做Acommon.js，恰好也有个全局对象Common，即使小A在定义Common 时聪明的使用了window.Common=window.Common || {}，但在HTML中引用文件时我们的common.js在Acommon.js之后，那么我们的定义方式window.Common={}就完全覆盖了小A的所有功能。即使我们也足够聪明，我们的log和encode也会覆盖小A的同名函数。 文件依赖。common.js是依赖jQuery的，如果小A并没有引用jQuery，那就只能靠浏览器报错来手动解决依赖关系。小项目可能还比较容易解决，但是如果项目变大，依赖文件变多，那就麻烦了。 都关联到window对象。浏览器唯一的JavaScript全局对象就是window，所以大家都把可抽象部分关联到window对象，导致window对象越来越大，极易产生命名冲突。 为什么要模块化?为了解决上述问题。模块的封装可以很轻易的解决命名冲突，模块的引用可以很轻易的解决文件依赖。 主流的模块化工具SeaJS和RequireJS，两者的主要区别:(参考 http://www.zhihu.com/question/20342350) 两者定位有差异。RequireJS 想成为浏览器端的模块加载器，同时也想成为Rhino/Node等环境的模块加载器。SeaJS则专注于Web浏览器端，同时通过Node扩展的方式可以很方便跑在Node 服务器端。 两者遵循的标准有差异。RequireJS 遵循的是 AMD(异步模 块定义)规范，SeaJS 遵循的是 CMD(通用模块定义)规范。规范的不同，导致了两者API的不同。SeaJS更简洁优雅，更贴近CommonJS Modules/1.1和Node Modules规范。 两者社区理念有差异。RequireJS在尝试让第三方类库修改自身来支持RequireJS，目前只有少数社区采纳。SeaJS不强推，而采用自主封装的方式来“海纳百川”，目前已有较成熟的封装策略。 两者代码质量有差异。RequireJS是没有明显的bug，SeaJS是明显没有bug。 两者对调试等的支持有差异。SeaJS通过插件，可以实现Fiddler中自动映射的功能，还可以实现自动combo等功能，非常方便便捷。RequireJS无这方面的支持。 两者的插件机制有差异。RequireJS采取的是在源码中预留接口的形式，源码中留有为插件而写的代码。SeaJS采取的 插件机制则与Node的方式一致:开放自身，让插件开发者可直接访问或修改，从而非常灵活，可以实现各种类型的插件。综上所述，我们选择了SeaJS。 目前的状况 先看两张图片，左边是之前的JS文件结构图，右边是现在的JS文件结构图。可以看到，结构清晰了，用不用SeaJS其实都该这 样做。关键问题是SeaJS如何做到模块化的?与NodeJS使用的 Require非常类似，3个接口就可以搞定: define:定义模块。 require:引用模块。 exports:导出模块接口。我们看看右图中的modules下的Ajax.js是如何定义的:123456789101112131415161718define(function(require, exports, module)&#123; //引入其他模块 var $ = require(jquery); //定义模块 var Ajax = &#123;&#125;; //导出模块接口 module.exports = Ajax; //模块接口定义 Ajax.get = function(url, cb)&#123; $.get(url, cb); &#125;; Ajax.post = function(uri, data, cb)&#123; $.post(url, data, cb); &#125;; &#125;); 上述代码可以看到，在使用模块的时候只需要require一下，SeaJS会根据文件名查找相应的模块，然后赋值给指定变量，完全不需要担心命名冲突的问题，而使用require可以完整的解决文件依赖的问题，我们不需要在HTML中留意文件的依赖顺序，只需要在使用的时候在JS中require一下，SeaJS就会自动下载文件并执行。最后，完全与window全局对象没有任何关系。","categories":[{"name":"tech","slug":"tech","permalink":"http://blog.0xfc.cn/categories/tech/"}],"tags":[{"name":"SeaJS","slug":"SeaJS","permalink":"http://blog.0xfc.cn/tags/SeaJS/"}]},{"title":"jquery-wan-backtotop","slug":"backtotop","date":"2015-08-24T08:04:35.000Z","updated":"2015-08-24T08:37:50.000Z","comments":true,"path":"2015/08/24/backtotop/","link":"","permalink":"http://blog.0xfc.cn/2015/08/24/backtotop/","excerpt":"","text":"主题 基于jQuery实现的回到顶部插件，可自定义位置，尺寸，图片资源，提供3套主题。可通过向下拖动主页查看。 详情配置文件如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445var optionsTheme1 = &#123; imgSrc: 'http://7xl1b4.com1.z0.glb.clouddn.com/to_top.png', displayTop: 500, speed: 200, size: &#123; height: '35px', width: '35px' &#125;, position: &#123; right: '40px', bottom: '30px' &#125;, template: ''&#125;;var optionsTheme2 = &#123; imgSrc: 'http://7xl1b4.com1.z0.glb.clouddn.com/to_top_2.png', displayTop: 2500, speed: 800, size: &#123; height: '40px', width: '40px' &#125;, position: &#123; right: '90px', bottom: '60px' &#125;, template: ''&#125;;var optionsTheme3 = &#123; imgSrc: 'http://7xl1b4.com1.z0.glb.clouddn.com/to_top_3.png', displayTop: 4000, speed: 2000, size: &#123; height: '45px', width: '45px' &#125;, position: &#123; right: '140px', bottom: '90px' &#125;, template: ''&#125;;$(\".wan-backtotop-theme-1\").WanBackToTop(optionsTheme1);$(\".wan-backtotop-theme-2\").WanBackToTop(optionsTheme2);$(\".wan-backtotop-theme-3\").WanBackToTop(optionsTheme3); HTML文件如下：123&lt;div class=\"wan-backtotop-theme-1\"&gt;&lt;/div&gt;&lt;div class=\"wan-backtotop-theme-2\"&gt;&lt;/div&gt;&lt;div class=\"wan-backtotop-theme-3\"&gt;&lt;/div&gt; Options: imgSrc: string，图片路径，可自行设置displayTop: number，设置离顶部多远开始显示按钮speed: number，回到顶部的时间size: object，{height, width}，设置图片的尺寸position: object，{right, bottom}，设置图片的绝对位置template: 暂时未用","categories":[{"name":"component","slug":"component","permalink":"http://blog.0xfc.cn/categories/component/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"wan-select","slug":"wan-select","date":"2015-08-21T04:13:10.000Z","updated":"2015-08-24T08:38:15.000Z","comments":true,"path":"2015/08/21/wan-select/","link":"","permalink":"http://blog.0xfc.cn/2015/08/21/wan-select/","excerpt":"","text":"主题 基于angular material的可搜索多选控件。 详情选择的数据： 配置文件如下：12345678910111213141516171819angular .module('demoWan', [ 'ngMaterial', 'fc.dateRange', 'fc.wanSelect' ]).controller('DemoCtrl', DemoCtrl);function DemoCtrl($scope) &#123; $scope.startDate = \"2015-07-07\"; $scope.endDate = \"2015-07-27\"; $scope.dateLength = 0; $scope.sourceData = [\"中国\", \"日本\", \"蒙古\", \"北韩\", \"朝鲜\", \"韩国\", \"缅甸\", \"文莱\", \"柬埔寨\", \"东帝汶\", \"印度尼西亚\", \"寮国\", \"老挝\", \"马来西亚\", \"菲律宾\", \"新加坡\", \"泰国\", \"越南\"]; $scope.selectedData = []; $scope.selectChanged = function()&#123; jQuery(\"#wan-selected-data\").html($scope.selectedData.join('，')); &#125;;&#125; HTML文件如下： 12345&lt;wan-select placeholder=\"国家：\" source-data=\"sourceData\" selected-data=\"selectedData\" select-changed=\"selectChanged()\"&gt;&lt;/wan-select&gt; Options: placeholder: stringsource-data: array，源数据selected-data: array，选中的数据select-changed: 事件，选中的Array改变时触发","categories":[{"name":"component","slug":"component","permalink":"http://blog.0xfc.cn/categories/component/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"angular-material daterange-picker","slug":"daterange-picker","date":"2015-08-20T08:30:45.000Z","updated":"2015-10-08T13:03:15.000Z","comments":true,"path":"2015/08/20/daterange-picker/","link":"","permalink":"http://blog.0xfc.cn/2015/08/20/daterange-picker/","excerpt":"","text":"主题 基于angular material的日期段选择控件，也可以只选择日期。 详情 配置文件如下：12345678910111213141516171819angular .module('demoWan', [ 'ngMaterial', 'fc.dateRange', 'fc.wanSelect' ]).controller('DemoCtrl', DemoCtrl);function DemoCtrl($scope) &#123; $scope.startDate = \"2015-07-07\"; $scope.endDate = \"2015-07-27\"; $scope.dateLength = 0; $scope.sourceData = [\"中国\", \"日本\", \"蒙古\", \"北韩\", \"朝鲜\", \"韩国\", \"缅甸\", \"文莱\", \"柬埔寨\", \"东帝汶\", \"印度尼西亚\", \"寮国\", \"老挝\", \"马来西亚\", \"菲律宾\", \"新加坡\", \"泰国\", \"越南\"]; $scope.selectedData = []; $scope.selectChanged = function()&#123; jQuery(\"#wan-selected-data\").html($scope.selectedData.join('，')); &#125;;&#125; HTML文件如下： 1234567891011&lt;div class=\"wrapper\" ng-controller=\"DemoCtrl\"&gt; &lt;daterange-picker date-lang=\"cn\" date-type=\"range\" start-date=\"startDate\" end-date=\"endDate\" date-length=\"dateLength\" max-date=\"2015-08-23\" min-date=\"2010-07-09\" date-label=\"选择日期段：\"&gt; &lt;/daterange-picker&gt;&lt;/div&gt; Options: 所有日期格式均为 YYYY-MM-DDdate-lang: string，默认值en，设为cn即为中文date-type: string，默认为日期选择，设为range即为日期段start-date: 选中的开始日期end-date: 选中的截止日期date-length: 日期长度max-date: 所能选的最大日期min-date: 所能选的最小日期date-label: labelshoule-refresh: 如果起始日期或者截止日期可能会在组件外部被更改，则可将此字段设为true，每次选择日期前都会自动刷新组件confirm-event: 选择好时间后点击确认按钮的回调函数，会传入开始时间和结束时间两个参数","categories":[{"name":"component","slug":"component","permalink":"http://blog.0xfc.cn/categories/component/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"jquery-carousel","slug":"carousel","date":"2015-08-11T04:05:18.000Z","updated":"2015-11-02T02:05:30.000Z","comments":true,"path":"2015/08/11/carousel/","link":"","permalink":"http://blog.0xfc.cn/2015/08/11/carousel/","excerpt":"","text":"主题 基于jQuery实现的图片轮播效果。 详情 配置文件如下：123456789101112$(\".wan-carousel-1, .wan-carousel-2\").WanCarousel();$(\".wan-carousel-3\").WanCarousel(&#123; interval: 8000, speed: 1000,&#125;);$(\".wan-carousel-4\").WanCarousel(&#123; interval: 2000, speed: 200, callback: function(element, index) &#123;//called when animaton end &#125;&#125;); HTML文件如下：12345678910111213141516171819202122232425262728293031&lt;div class=\"wan-carousel wan-carousel-1\" style=\"width: 50%; float:left;\"&gt; &lt;div class=\"carousel-list\"&gt; &lt;img src=\"img/1.jpg\" alt=\"img\"&gt; &lt;img src=\"img/2.jpg\" alt=\"img\"&gt; &lt;img src=\"img/3.jpg\" alt=\"img\"&gt; &lt;img src=\"img/4.jpg\" alt=\"img\"&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=\"wan-carousel wan-carousel-2\" style=\"width: 50%; float:left;\"&gt; &lt;div class=\"carousel-list\"&gt; &lt;a href=\"#\"&gt; &lt;img src=\"img/1.jpg\" alt=\"img\"&gt; &lt;/a&gt; &lt;img src=\"img/2.jpg\" alt=\"img\"&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=\"wan-carousel wan-carousel-3\" style=\"width: 50%; float:left;\"&gt; &lt;div class=\"carousel-list\"&gt; &lt;img src=\"img/2.jpg\" alt=\"img\"&gt; &lt;img src=\"img/3.jpg\" alt=\"img\"&gt; &lt;img src=\"img/4.jpg\" alt=\"img\"&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=\"wan-carousel wan-carousel-4\" style=\"width: 50%; float:left;\"&gt; &lt;div class=\"carousel-list\"&gt; &lt;a href=\"#\"&gt; &lt;img src=\"img/1.jpg\" alt=\"img\"&gt; &lt;/a&gt; &lt;img src=\"img/2.jpg\" alt=\"img\"&gt; &lt;/div&gt;&lt;/div&gt;","categories":[{"name":"component","slug":"component","permalink":"http://blog.0xfc.cn/categories/component/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"jquery-wan-address-select","slug":"address","date":"2015-08-11T02:11:38.000Z","updated":"2015-08-17T12:25:26.000Z","comments":true,"path":"2015/08/11/address/","link":"","permalink":"http://blog.0xfc.cn/2015/08/11/address/","excerpt":"","text":"主题 基于jQuery实现的中国省市区选择插件，可自定义精细度：城镇，街道，村委。 详情 配置文件如下： 12345678910111213141516171819202122232425262728293031323334 var optionsAddress1 = &#123; initProvice: '北京市', initCity: '市辖区', initCounty: '西城区', initTown: '月坛街道办事处', initVillage: '南礼士路社区居委会', fineness: 'county'&#125;;var optionsAddress2 = &#123; initProvice: '北京市', initCity: '市辖区', initCounty: '西城区', initTown: '月坛街道办事处', initVillage: '南礼士路社区居委会', fineness: 'town' &#125;; var optionsAddress3 = &#123; initProvice: '北京市', initCity: '市辖区', initCounty: '西城区', initTown: '月坛街道办事处', initVillage: '南礼士路社区居委会', fineness: 'village' &#125;; $(\".wan-address-select1\").WanAddressSelect(optionsAddress1); $(\".wan-address-select2\").WanAddressSelect(optionsAddress2); $(\".wan-address-select3\").WanAddressSelect(optionsAddress3); $(\"#getValue\").on(\"click\", function()&#123; alert(JSON.stringify($(\".wan-address-select1\").WanAddressSelect('val'))); &#125;); $(\"#getValueAndId\").on(\"click\", function()&#123; alert(JSON.stringify($(\".wan-address-select1\").WanAddressSelect('idval'))); &#125;); HTML文件如下： 123&lt;div class=\"wan-address-select wan-address-select1\"&gt;&lt;/div&gt;&lt;div class=\"wan-address-select wan-address-select2\"&gt;&lt;/div&gt;&lt;div class=\"wan-address-select wan-address-select3\"&gt;&lt;/div&gt;","categories":[{"name":"component","slug":"component","permalink":"http://blog.0xfc.cn/categories/component/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"jquery-spinner","slug":"spinner","date":"2015-08-09T11:47:39.000Z","updated":"2015-09-12T08:30:22.000Z","comments":true,"path":"2015/08/09/spinner/","link":"","permalink":"http://blog.0xfc.cn/2015/08/09/spinner/","excerpt":"","text":"主题 基于jQuery实现的组件，支持最大值，最小值，起始值，步进值，异常处理，事件通知。 详情使用自定义配置 -+ 配置文件如下： 1234567891011121314151617181920var options = &#123; maxValue: 10, //设置所能到达的最大值，默认为 999 minValue: -5, //设置所能到达的最小值，默认为 -999 step: 2.131, //步进长度，默认为 1 inputWidth: 100, //根据最大值设置输入框的宽度，防止内容超出，默认为25 start: -2, //起始值，默认为 1 plusClick: function(element, val) &#123;//点击plus按钮触发事件 console.log(\"plus button click: \" + val); &#125;, minusClick: function(element, val) &#123;//点击minus按钮触发事件 console.log(\"minus button click: \" + val); &#125;, exceptionFun: function(exception) &#123;//值超出设置的范围时触发事件，等于1说明超出上范围，等于-1说明超出下范围 console.log(\"exception: \" + exception); &#125;, valueChanged: function(element, val) &#123;//值变更时触发事件 console.log(\"value changed: \" + val); &#125;&#125;;$(\".wan-spinner\").WanSpinner(options); HTML文件如下： 12345&lt;div class=\"wan-spinner wan-spinner-1\"&gt; &lt;a href=\"javascript:void(0)\" class=\"minus\"&gt;-&lt;/a&gt; &lt;input type=\"text\" value=\"1\"&gt; &lt;a href=\"javascript:void(0)\" class=\"plus\"&gt;+&lt;/a&gt;&lt;/div&gt; 使用默认配置-+HTML文件如下： 12345&lt;div class=\"wan-spinner wan-spinner-2\"&gt; &lt;a href=\"javascript:void(0)\" class=\"minus\"&gt;-&lt;/a&gt; &lt;input type=\"text\" value=\"1\"&gt; &lt;a href=\"javascript:void(0)\" class=\"plus\"&gt;+&lt;/a&gt;&lt;/div&gt;","categories":[{"name":"component","slug":"component","permalink":"http://blog.0xfc.cn/categories/component/"}],"tags":[{"name":"组件","slug":"组件","permalink":"http://blog.0xfc.cn/tags/组件/"}]},{"title":"八戒传-5","slug":"Bajie-5","date":"2015-04-29T03:59:59.000Z","updated":"2015-08-05T13:34:59.000Z","comments":true,"path":"2015/04/29/Bajie-5/","link":"","permalink":"http://blog.0xfc.cn/2015/04/29/Bajie-5/","excerpt":"","text":"感想 随便想想，无甚含义。 正文 八戒，当为师重新拿起笔给你写信，为师相信，一个新的时代即将来临。 这几个月皇上又攻破了几个小地方，为师已经无法目测大唐的疆土了。金山寺的香火越来越旺，焚香的鼎都排到了二门外。不知哪来的谣言蛊惑了善男信女，门外的银杏树叶被当成了护身符，现在只剩下两棵光秃秃的树，为师已经习惯了充满了光秃秃的生活。旁边的尼姑庵也跟着沾了光，你师母又一次容光焕发，呼和着小尼姑做着做那的，生活好像重新回到了天真烂漫，无忧无虑的童年，阳光放肆的洒满了大唐的疆土，到处都是年轻勇敢的味道。晨钟暮鼓日复一日，小和尚和小尼姑也越来越甜蜜，没有了念不完的经书，也没有了无欲无求的禁令，耳朵总会在不经意间收到麻雀叽叽喳喳的吵架声，深呼吸就能品尝到整个夏天所有花朵的味道。这个夏天和春天一样短，一步就走完了夜夜笙歌，下过的雨都没能浸湿为师的头发。那个午后的红烧肉却依然散发着迷人的小乳猪的香味，就好像你一直陪在我身边一样。 皇上终于还回了所有的经书，那晚我们彻夜长谈，皇上说：宇宙洪荒，多少朝代更迭，无数位极之人穷尽一生，也未得长生之法，反倒不如平民百姓活的自在，活的有趣。他大笑着离开了寄托着大半生信仰的小黑屋，像个三岁小孩子一样。逝去的岁月总会适时的提醒人们莫忘初心，和你们不一样，提醒为师的是光秃秃的生活。 你知道，念经是个有苦又累的活，尤其是诵心经的时候。每晚睡觉前为师总会告诉自己第二天一定要早早起来诵经，但是，取经回来后为师已经找不到方向了，金山寺像个笼子一样圈养我们，香客们的香火钱足够我们过上非常安逸的生活，傻傻的香客们，总是在祈求大富大贵。 爱你的师父，再聊。","categories":[{"name":"westgoal","slug":"westgoal","permalink":"http://blog.0xfc.cn/categories/westgoal/"}],"tags":[{"name":"八戒","slug":"八戒","permalink":"http://blog.0xfc.cn/tags/八戒/"}]},{"title":"八戒传-4","slug":"Bajie-4","date":"2015-04-24T03:59:59.000Z","updated":"2015-08-05T13:34:57.000Z","comments":true,"path":"2015/04/24/Bajie-4/","link":"","permalink":"http://blog.0xfc.cn/2015/04/24/Bajie-4/","excerpt":"","text":"感想 随便想想，无甚含义。 正文 八戒，昨天早上鸡还没来得及叫床，皇上就传为师去內苑，说是商量国家大事，其实就是因为老沙和小白的事。皇上说要不是看在他们俩还有取经功劳的份上，早就下令格杀勿论了。 西天路上你我都知道老沙虽然脑子不好使，但是不辞辛苦，任劳任怨，小白就更不用说了，风里来雨里去，被为师骑了数十载，而且再怎么说，他们俩本事高超，不能降妖除魔，也可除暴安良。其实说白了，还不是因为老沙出身不好，加之王母一直记挂着琉璃盏的事，小白虽然出身名门，但是当年怒烧明珠的事，玉帝怎会轻易放过。现在看看，老沙和小白不就是打杀了借海路潜逃的某某京官吗，这就被认定是海盗了，至于恐怖分子的头衔，也只是因为皇上下发了通缉令后他们俩扬言要一路杀到京城，炸毁皇宫。十几年前，广开言路，现在却祸从口出。即使如此，大唐也是除了西方极乐世界外，世人趋之若鹜的极乐宝地。为师常自问，天下以何为太平？平民以温饱赞天下，想当年皇上所说水可载舟亦可覆舟，此刻幡然醒悟，水可清可臭可腐可恶。天朝民众之千年奴性，寸步难移。 说点开心的事，上次悟空临走的时候我千叮万嘱要他暗地里帮帮老沙和小白，没想到这个死猴子自从有了家室也开始胆小怕事了，现在他的棒子估计只会变成老婆的绣花针了。 八戒，借用你的人际关系在天上替老沙和小白多美言几句，嘿嘿，别忘了多加利用你、嫦娥还有玉帝之间复杂的那些关系。 爱你的师父，再聊。","categories":[{"name":"westgoal","slug":"westgoal","permalink":"http://blog.0xfc.cn/categories/westgoal/"}],"tags":[{"name":"八戒","slug":"八戒","permalink":"http://blog.0xfc.cn/tags/八戒/"}]},{"title":"八戒传-3","slug":"Bajie-3","date":"2015-04-23T03:59:59.000Z","updated":"2015-08-05T13:34:55.000Z","comments":true,"path":"2015/04/23/Bajie-3/","link":"","permalink":"http://blog.0xfc.cn/2015/04/23/Bajie-3/","excerpt":"","text":"感想 随便想想，无甚含义。 正文 猪，前几天猴子来看望我，带了一大袋香蕉，自从你师母告诉我她门下的小尼姑经常在饭后带一根香蕉回房间却在第二天早上才将香蕉皮丢出去后，为师就越发觉得香蕉属荤，到现在，为师已经不吃萝卜、茄子和西瓜了，看着都觉得有些委屈。猴子讲了一个传说，至少对为师来说是个传说，不知道是几千年前的事情了，那时候他还是一块相信海枯石烂的石头，但是到最后还是忍不住自己蹦出来了，不经想果然生不逢时，被祖师爷压了500年。 为师其实挺后悔的，那时候年少轻狂，又从小接受被ZF左右的正统佛学教育，年纪轻轻便背着皇上的“宁爱本乡一捻土,勿恋他国万两金”，斗志昂扬的带着你们三个没有共同语言的连搞基都搞不了的人妖见到了一只手就可以掌控天下的祖师爷，拿回来一坨满是忧郁的即使日夜煎熬也可能一事无成的经文，直到现在为师才渐渐明白，为师只是祖师爷用来耍皇上的小棋子，还好那些书为师只是稍微翻了翻，不然就会像现在的皇上一样，每天都在观察家禽的起居作息，不理朝政，不顾天下人民死活。回到正题，为师为什么后悔呢，当然不是因为被祖师爷耍了，也不是因为现在还是一副臭皮囊，没有得到长生之法，而是因为浪费了大好的青春，害得你师娘只能削发为尼以示忠贞，搞得至今膝下无子。 又是一个月，为师觉得自己越发的老了，再也没有激情和精力去佛堂拜见祖师爷了，你不知道，每次见到祖师爷身边的观音娘娘打着OK的手型时，我就一阵冷汗。不说了，他们都在偷听。 至于猴子讲了什么传说，下次再唠给你。 爱你的师父，再聊。","categories":[{"name":"westgoal","slug":"westgoal","permalink":"http://blog.0xfc.cn/categories/westgoal/"}],"tags":[{"name":"八戒","slug":"八戒","permalink":"http://blog.0xfc.cn/tags/八戒/"}]},{"title":"八戒传-2","slug":"Bajie-2","date":"2015-04-22T03:59:59.000Z","updated":"2015-08-05T13:34:44.000Z","comments":true,"path":"2015/04/22/Bajie-2/","link":"","permalink":"http://blog.0xfc.cn/2015/04/22/Bajie-2/","excerpt":"","text":"感想 随便想想，无甚含义。 正文 八戒，转眼又过了一个月，不知道天气怎么回事，为师已经好久没有收到你亲自做的的猪扒信了。夏日炎炎，广寒宫成了避暑胜地，不知道你是不是在偷偷勾搭嫦娥妹妹。 前几天世民兄来找为师，大发雷霆说他已经翻遍了所有的经书还是没找到可以长生不老的法子。为师就和他说你看我身边凡是可以长生不老的不是猪就是猴，人要是那么容易就可以长生不老，为师早就不在寺庙念经了。他一甩袖子，气呼呼的走了。我听说这两天他已经开始研究家禽和野兽了。 说实话，取经回来后为师还没有认真翻过经书，那些经书有些晦涩难懂，也只有回来的那天晚上看了两眼而已。皇帝老了，放不下的东西太多，也只有他才有耐心去读这些书。还有，那本让你撕破的书我没敢拿给皇上，一直在垫着床脚。等等，难道长生不老的法子在这本书上！！ 夜深人静的时候为师总是在思考，我们跋山涉水去西天拿回来那些书到底有什么意义，离开长安时那拯救天下苍生的凌云壮志哪去了。但是总是在还没有想出原因的时候，你师母就急急忙忙的跑过来说我门下的哪个小和尚又在勾引她门下的某个小尼姑了。唉，世事难料啊。 有个不幸的消息，原来你师母没怀孕，我也奇怪，为啥我们刚回来一个月，你师母就已经怀孕俩月了。算了，再努力吧。 如果你收到为师的信，一定记得回复，为师一直在等。 爱你的师父，再聊。","categories":[{"name":"westgoal","slug":"westgoal","permalink":"http://blog.0xfc.cn/categories/westgoal/"}],"tags":[{"name":"八戒","slug":"八戒","permalink":"http://blog.0xfc.cn/tags/八戒/"}]},{"title":"八戒传-1","slug":"Bajie-1","date":"2015-04-21T03:59:59.000Z","updated":"2015-08-05T13:34:40.000Z","comments":true,"path":"2015/04/21/Bajie-1/","link":"","permalink":"http://blog.0xfc.cn/2015/04/21/Bajie-1/","excerpt":"","text":"感想 寄居广州城乡结合处，老婆在天河上班。那日午后，天降大雨，雷声滚滚，无法入眠，故写此文送于老婆，无甚含义。 正文 八戒，师父这里一切都好，刚才也下了一点雨，我没有数清楚是多少滴。天河下雨了，那河水肯定涨到你的腰了，不知道那猴子养的马有没有被淹死。好久没有去你那里坐坐了，上次去你还亲自下厨，好怀念你的味道啊。 有时候我念经念到想吐了，就会想起一起去西天的那段时光。哈哈，师父瞒着你们和如来喝了两杯，唉，如来也不容易。没想到转眼一个月就过去了，好快好快。八戒，师父知道你比较好色，虽然你住在天上，但还是要注意身体，那些仙女儿即使再好看，也别辜负高家女儿。 师父一个人住在庙里，每天除了大妈大姐来上香，没有一个漂亮mm，都被高富帅抢走了。皇上也不来看我了，每天抱着经书祈求长生不老，连他的妃子都无暇顾及，唉，就这样吧。 八戒，不知道你还会不会经常想起那猴子，反正悟净已经彻底堕落了，他和白龙马混在一起，除了做海盗，还做起了恐怖分子，搞得到处都是他们的通缉令。说那猴子吧，他有了小猴子，据他说也是从石头里蹦出来的，可为师总觉得他的话不靠谱，如果你了解，要尽快回复我。 好了，师父要去隔壁尼姑庵找你师母了，看来她又做了红烧肉，你应该不感兴趣。还有个好消息，再有八个月，小唐僧就出生了，哈哈，我也是最近才知道。家里也养了一窝猪，下的猪仔没一个像你的，你要努力哦。 爱你的师父，再聊。","categories":[{"name":"westgoal","slug":"westgoal","permalink":"http://blog.0xfc.cn/categories/westgoal/"}],"tags":[{"name":"八戒","slug":"八戒","permalink":"http://blog.0xfc.cn/tags/八戒/"}]}]}